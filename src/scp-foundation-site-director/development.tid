title: $:/plugins/linonetwo/scp-foundation-site-director/development
type: text/vnd.tiddlywiki

!! Dev env

Install rust by [ext[https://rustup.rs/]], then

```sh
rustup target add wasm32-unknown-unknown
cargo install -f wasm-bindgen-cli
```

!! Try

This will run the game in window mode. But without the wiki adaptor, it can not load any gameplay data.

```sh
cargo run
```

This will let you know if you have done anything wrong. For example, you must open the `game` folder in vscode, not the root folder.

!! Dev in web

```sh
cargo build --release --target wasm32-unknown-unknown
wasm-bindgen --omit-default-module-path --reference-types --weak-refs --out-name game --out-dir wasm --target web target/wasm32-unknown-unknown/release/game.wasm --debug
```

The first command will build the example for the wasm target, creating a binary. Then, [[wasm-bindgen-cli|https://rustwasm.github.io/wasm-bindgen/reference/cli.html]] is used to create javascript bindings to this wasm file in the output file `src/scp-foundation-site-director/game/wasm/target/game.js`, which can be loaded using [[tiddlywiki.files File|https://tiddlywiki.com/#tiddlywiki.files%20Files]] in `src/scp-foundation-site-director/game/tiddlywiki.files`.

Then serve examples/wasm directory to browser. i.e.

!!! Loading gameplay data

Gameplay data and assets are written in the Tiddlywiki plugin, and loaded by the adaptor when run the game in the browser.

They are normal JSON file and image/audio files, with a [[meta file for Tiddlywiki|https://tiddlywiki.com/#TiddlerFiles]] to bundle them as tiddler to the wiki. See [[Tiddler as Basic Element|https://tiddlywiki.com/dev/#Tiddler%20as%20Basic%20Element]] for design principle.

JSON and image/audio files found in the `game/assets` folder will be auto recognized by [[tiddlywiki.files File|https://tiddlywiki.com/#tiddlywiki.files%20Files]] in `src/scp-foundation-site-director/game/tiddlywiki.files`. If you find some kind of file not being correctly pick up, try read the doc in the link, and modify this file to add the new type.

!!! Hot reload?

Currently gameplay logic written in the Rust are no hot reloaded. You need to update the code, then run the above command again, and view the result in the browser.

But gameplay data and assets are hot reloaded. You can edit the JSON and add new assets, browser will auto reload by [[Modern.TiddlyDev|https://github.com/tiddly-gittly/Modern.TiddlyDev]], and when page loaded, the game will load the new data.

!! Publish

Tag a git commit with `vx.x.x` will trigger publish in Github Actions, and auto create a release. You can add the release info to the [[CPL|https://tw-cpl.netlify.app/]] later.

!! TODO

Auto compress JSON and image before build in the CI.
