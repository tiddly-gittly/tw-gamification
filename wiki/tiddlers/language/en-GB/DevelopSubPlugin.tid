title: language/en-GB/DevelopSubPlugin

\import [[language/en-GB/examples/show-example]]

! Developing Sub-plugins

!! Event Package

Referring to the [[$:/plugins/linonetwo/early-sleep-early-work]] plugin, you can generate events declaratively with tiddlers with specific tags and fields:

!!! Action

Tiddlers with the <$transclude $variable=tag tag={{$:/plugins/linonetwo/tw-gamification/tags/reality-action-meta-tag}} /> tag will be recognized as "Action Event Generators".

Some games will use the information from these tiddlers to generate a list of buttons. When the button is clicked, the corresponding action widget will be triggered. See the `IActionDefinitions` type in this repository for specific fields.

After creating them, you can trigger them via the message widget. Note the changes in [[event cache (cache-file/desktop)|$:/plugins/linonetwo/tw-gamification/reality-event-cache/cache-files/desktop]].

<<show-example generateEventsByAction>>

The example above demonstrates two ways to trigger reality actions:

# ''Using Predefined Tiddlers'': The [[$:/plugins/linonetwo/early-sleep-early-work/events/actions/early-sleep]] tiddler has the <$transclude $variable=tag tag={{$:/plugins/linonetwo/tw-gamification/tags/reality-action-meta-tag}} /> tag and reward parameters
# ''Direct Parameter Passing'': Suitable for one-time activities, no need to create dedicated tiddlers, directly define all necessary parameters in the button

This flexibility allows you to choose the appropriate method based on your needs:

* Repetitive daily habits are recommended to use predefined tiddlers
* Temporary activities, special events, or testing purposes can directly pass parameters

See the introduction to reality action tags in [[SystemTags]] and the [[Reality Action Usage Guide|RealityAction]]. Check the changes in [[event cache (desktop)|$:/plugins/linonetwo/tw-gamification/reality-event-cache/cache-files/desktop]] to confirm that events have been correctly recorded.

!!! Change Filter (Advanced Usage)

Tiddlers with the <$transclude $variable=tag tag={{$:/plugins/linonetwo/tw-gamification/tags/change-filter-meta-tag}} /> tag are recognized as "Change Filter Event Generators".

Whenever a change is made to the knowledge base, the `reality-event-trigger-filter` field on the tiddler is used as a filter to determine if the tiddler where the change occurred matches the conditions. If the conditions are met, an event is generated. See the `IFilterEventGeneratorDefinitions` type in this repository for specific fields.

!! Simple Games in Plain Wikitext

Refer to the [[$:/plugins/linonetwo/ego-store-lite]] plugin to create simple games in plain text or the [[$:/plugins/linonetwo/scp-foundation-site-director]] plugin to create small to medium sized games based on the Rust language.

Here we will only introduce the development of text-only simple games, because there are already many professional materials available online for developing Rust language games.

!!! Handling Reward Events to Convert to In-game Rewards

First, trigger the `<$action-convert-reality-event/>` widget with a button that declares which events you want to handle, and then within it, use filters to select the type of event you want to handle to convert the reward event to an in-game reward. Note that if you just declare what you want to handle, but don't do the conversion correctly, then the player's reward event will be lost.

<$GameWikiProvider>
  <<show-example convertEvents>>
</$GameWikiProvider>

The framework already surrounds your game content with `<$GameWikiProvider></$GameWikiProvider>` widgets, which will accept `pop-reality-events` events triggered by the `<$action-convert-reality-event/>` widgets and pass the pending reward events back to the `<$action-convert-reality-event/>` widget. After that, it's up to the other action widgets within it to generate the in-game reward you specified, as in the example.

!!! Designing In-game Rewards

Refer to [[Exchangeable Resources|ExchangeableResources]] to design resources that will attract players from other planes.

!!! Consume In-game Rewards, Convert to Other In-game Rewards

Trigger the `<$action-consume-value-tiddler/>` widget with a button, declaring which tiddler the value you want to consume exists in and how much to consume. If consumed successfully, it will further trigger other internal action widgets to generate the in-game reward you specified.

# The value stored in the tiddler must be greater than the value to be consumed before it will be consumed
# The condition field is a filter that determines if the consumption condition is met, and will only be consumed if its return is not null

This widget assumes:

# You store the value in the `text` field of the tiddler (the body part)
# A number is stored
# The tiddler is only used to store one type of value (e.g. only for experience values)

<<show-example consumeRewards>>

!! Developer Toolkit

!!! System Tags

[[System Tags|SystemTags]] describe some tags that the framework will use.

!!! Macros, Methods, Procedures

!!!! Count Unused Reward Events

<<show-example countEvents>>
