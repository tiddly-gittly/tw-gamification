title: language/zh-Hans/GameplayData

!! 玩法数据

在使用 ECS 时，Component 要用特定的模板初始化，例如创建一只兽人时，它的生命 Component 可能需要带有生命值字段，和 100 点生命的默认值。

发布游戏时，工具链会检测玩法数据是否符合对应的定义，作为构建的一环，避免线上问题。游戏所需本体通过 `game-ontology` npm 包发布，并提供相关检测工具。

!!! 为什么需要检测数据？

例如 [[CDDA Kenan Mod 里的例子|https://github.com/Kenan2000/CDDA-Structured-Kenan-Modpack/pull/262/files]]，核心数据格式改了，导致 Mod 里的数据格式过时，导致运行时游戏崩溃。

但如果开发者在发布前就能检测到这个问题，就能在这个 bug 影响用户之前自己修复它了。

!!! 只能使用本体里有的字段吗？

本体提供了一些常用的、游戏之间有共性的字段，但不可能提供所有可能的字段，因为游戏的玩法是无限的，本体只提供了一些常用的字段，例如生命值、攻击力、移动速度等。你可以先创建一个带有新字段的子类，暂时用着，然后向本体库提交 PR，等待审核通过后发布新版本，就可以使用官方本体了。

要注意的是，本体库的目的是提供游戏之间的互操作性，让你可以一键直接使用其他游戏的数据和玩法系统，不需要花费时间去适配和整合。而且可以让游戏物品通过一定的交易步骤后在不同游戏之间流通，就像你可以在《饥荒》里使用《我的世界》的物品或者反之，而实现联动的开发成本很低。

如果你的游戏是独立的，不需要和其他游戏互操作，那么你可以不使用本体库，自己定义数据格式，就像过去世界上的所有游戏一样。

!!! 如何处理游戏数值？

游戏本体的 RDFs 上除了设定所需字段以外，还会设定字段的默认值，例如生命值的默认值是 100。在游戏开发的初期你可以直接使用这些默认值，等到游戏开发的后续阶段再为了游戏的平衡性，调整这些数值。

你也可以直接导入其它开发者的游戏数据，继承大量的世界背景设定，从而不需要在开发前中期去为世界上的草坪和瓢虫设定数值。

在物品跨世界交易时，如果两个游戏的数值体系相差较大，则需要为每个字段定义转换函数。取决于具体运营策略，你可以根据物品在上个世界里的排名，来平等地将它转换为下个世界里使用体验差不多的物品；也可以将所有带出世界的物品变成只能看没有用的玩具；或在进入下个世界时，允许玩家一身神装进入。由于转换函数是由进入的第二个世界的开发者定义的，所以很可能是平等转换或无效化，以免玩家跳过过多数值养成。由于转换函数较多，建议使用自动化工具生成。

!!! 为什么不用 JSON Schema？

描述能力不足，游戏模拟了现实世界，也就有了现实世界知识的复杂度，需要用到 RDF 级别的描述能力。